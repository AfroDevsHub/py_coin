version: 2.1

orbs:
  python: circleci/python@2.1.1

jobs:
  Build and Test:
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: cimg/python:3.10
      - image: circleci/cci-demo-docker-primary:0.0.2
      - image: postgres:9.4.1
        environment:
          POSTGRES_DB: py_coin_db_test
          POSTGRES_USER: py_user_test
          POSTGRES_PASSWORD: py_user_password_test
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
    working_directory: https://github.com/AfroDevsHub/py_coin

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Install Dependencies
          command: |
            pip install -r requirements.txt
            alembic upgrade head
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1

      - run:
          name: Run Linting
          command: |
            export PYTHONPATH=$PYTHONPATH:$(pwd)
            pylint .

      - run:
          name: Run Type-Checking
          command: |
            export PYTHONPATH=$PYTHONPATH:$(pwd)
            mypy .

      - run:
          name: Run unit tests
          environment:
            POSTGRES_DB: py_coin_db_test
            POSTGRES_USER: py_user_test
            POSTGRES_PASSWORD: py_user_password_test
            POSTGRES_HOST: localhost
            POSTGRES_PORT: 5432
          command: |
            export PYTHONPATH=$PYTHONPATH:$(pwd)
            pytest .
            
      - setup_remote_docker
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d

            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            docker run --network container:contacts \
              appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

workflows:
  version: 2
  py_coin:
    jobs:
      - Build and Test